<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>my.rinat</groupId>
    <artifactId>katas</artifactId>
    <version>1.0</version>

    <description>
        These katas mainly copied from https://github.com/BNYMellon/CodeKatas and
        https://github.com/eclipse/eclipse-collections-kata.

        ==========
        The Calendar Kata is an advanced kata which can help developers
        become familiar with the Java 8 Date/Time and ThreeTen-Extra libraries
        ==========
        The CodePoint code kata gives you an opportunity to learn about string manipulation and
        reading from and writing to files in Java.
        ==========
        The Deck of Cards Kata is an advanced kata which can help developers
        become familiar with multiple Java Collection Frameworks.
        ==========
        The Donut Kata is an advanced kata which can help developers
        become familiar with lesser known APIs of Eclipse Collections.
        ==========
        The Java Lambda Kata is meant to give a quick practical introduction to understanding and
        leveraging lambdas in Java 8.
        ==========
        The JMH Kata is a simple project setup with some basic micro-benchmarks
        that you can use as a model to try out your own Java micro-benchmarks using
        the Java Micro-benchmark Harness (JMH).
        ==========
    </description>

    <modules>
        <module>java8</module>
        <module>java11</module>
        <module>kotlin</module>
        <module>groovy</module>
        <module>scala</module>
        <module>sql-ex</module>
        <module>algorithms</module>
    </modules>
    <packaging>pom</packaging>

    <properties>

        <!-- java version -->

        <java.version>11</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!-- project encoding -->

        <project.encoding>UTF-8</project.encoding>
        <project.build.sourceEncoding>${project.encoding}</project.build.sourceEncoding>
        <project.reporting.outputEncoding>${project.encoding}</project.reporting.outputEncoding>

        <!-- dependency versions -->

        <eclipse-collections.version>9.2.0</eclipse-collections.version>
        <kotlin.version>1.2.41</kotlin.version>
        <jmh.version>1.21</jmh.version>
        <manifold.version>0.60-alpha</manifold.version>

    </properties>

    <dependencyManagement>
        <dependencies>

            <!-- kotlin -->

            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-stdlib</artifactId>
                <version>${kotlin.version}</version>
            </dependency>

            <!-- collections frameworks -->

            <dependency>
                <groupId>org.eclipse.collections</groupId>
                <artifactId>eclipse-collections-api</artifactId>
                <version>${eclipse-collections.version}</version>
            </dependency>

            <dependency>
                <groupId>org.eclipse.collections</groupId>
                <artifactId>eclipse-collections</artifactId>
                <version>${eclipse-collections.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>4.1</version>
            </dependency>

            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>25.0-jre</version>
            </dependency>

            <dependency>
                <groupId>io.vavr</groupId>
                <artifactId>vavr</artifactId>
                <version>0.9.2</version>
            </dependency>

            <!-- junit 5 -->

            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>5.3.2</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- testing -->

            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>3.11.1</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.openjdk.jmh</groupId>
                <artifactId>jmh-core</artifactId>
                <version>${jmh.version}</version>
            </dependency>

            <dependency>
                <groupId>org.openjdk.jmh</groupId>
                <artifactId>jmh-generator-annprocess</artifactId>
                <version>${jmh.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- utils -->

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.6</version>
                <scope>provided</scope>
            </dependency>

            <!-- See: http://manifold.systems/docs.html -->
            <dependency>
                <groupId>systems.manifold</groupId>
                <artifactId>manifold-ext</artifactId>
                <version>${manifold.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

</project>